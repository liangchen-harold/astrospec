"""
@author: Harold Liang (https://lcsky.org)
"""

import numpy as np
try:
    import matplotlib.pyplot as plt
except:
    pass
from .utils import print

color_maps = {
    'linear': [i for i in range(256)],
    'orange-enhanced': [[53, 19, 0], [53, 19, 0], [61, 22, 0], [76, 27, 0], [93, 33, 0], [114, 41, 0], [137, 49, 0], [159, 57, 0], [179, 66, 0], [197, 74, 0], [212, 81, 0], [226, 88, 0], [238, 95, 0], [247, 102, 0], [255, 109, 0], [255, 115, 3], [255, 122, 6], [255, 128, 10], [255, 135, 14], [255, 142, 18], [255, 149, 23], [255, 155, 27], [255, 161, 32], [255, 168, 36], [255, 173, 40], [255, 179, 45], [255, 185, 49], [255, 190, 53], [255, 194, 56], [255, 199, 60], [255, 203, 63], [255, 207, 66], [255, 211, 69], [255, 214, 72], [255, 217, 74], [255, 220, 77], [255, 223, 79], [255, 225, 80], [255, 227, 82], [255, 229, 83], [255, 230, 85], [255, 232, 86], [255, 233, 87], [255, 234, 88], [255, 235, 88], [255, 235, 89], [255, 236, 89], [255, 236, 90], [255, 237, 90], [255, 237, 90], [255, 237, 90], [255, 237, 90], [255, 237, 90], [255, 236, 90], [255, 236, 89], [255, 236, 89], [255, 235, 89], [255, 235, 88], [255, 234, 88], [255, 233, 87], [255, 232, 86], [255, 231, 85], [255, 230, 85], [255, 229, 84], [255, 228, 83], [255, 226, 82], [255, 225, 80], [255, 223, 79], [255, 222, 78], [255, 220, 77], [255, 219, 75], [255, 217, 74], [255, 215, 72], [255, 213, 71], [255, 211, 69], [255, 209, 68], [255, 207, 66], [255, 205, 64], [255, 202, 62], [255, 200, 61], [255, 198, 59], [255, 195, 57], [255, 193, 55], [255, 190, 53], [255, 188, 51], [255, 185, 49], [255, 182, 47], [255, 180, 45], [255, 177, 43], [255, 174, 41], [255, 172, 39], [255, 169, 37], [255, 166, 35], [255, 163, 33], [255, 161, 31], [255, 158, 29], [255, 155, 27], [255, 152, 25], [255, 150, 23], [255, 147, 22], [255, 144, 20], [255, 142, 18], [255, 139, 16], [255, 136, 15], [255, 134, 13], [255, 131, 12], [255, 129, 10], [255, 126, 9], [255, 124, 7], [255, 122, 6], [255, 119, 5], [255, 117, 4], [255, 115, 3], [255, 113, 2], [255, 111, 1], [255, 109, 0], [253, 107, 0], [251, 105, 0], [248, 103, 0], [246, 101, 0], [243, 99, 0], [240, 97, 0], [238, 95, 0], [235, 94, 0], [232, 92, 0], [229, 90, 0], [226, 88, 0], [222, 86, 0], [219, 85, 0], [216, 83, 0], [213, 81, 0], [209, 80, 0], [206, 78, 0], [203, 76, 0], [199, 75, 0], [196, 73, 0], [192, 72, 0], [189, 70, 0], [186, 69, 0], [182, 67, 0], [179, 66, 0], [176, 64, 0], [172, 63, 0], [169, 62, 0], [166, 60, 0], [163, 59, 0], [160, 58, 0], [156, 56, 0], [153, 55, 0], [150, 54, 0], [147, 53, 0], [144, 52, 0], [141, 50, 0], [138, 49, 0], [135, 48, 0], [132, 47, 0], [130, 46, 0], [127, 45, 0], [124, 44, 0], [121, 43, 0], [119, 42, 0], [116, 41, 0], [113, 40, 0], [111, 39, 0], [108, 38, 0], [106, 38, 0], [104, 37, 0], [101, 36, 0], [99, 35, 0], [97, 34, 0], [94, 33, 0], [92, 33, 0], [90, 32, 0], [88, 31, 0], [86, 30, 0], [84, 30, 0], [81, 29, 0], [79, 28, 0], [77, 28, 0], [76, 27, 0], [74, 26, 0], [72, 26, 0], [70, 25, 0], [68, 24, 0], [66, 24, 0], [65, 23, 0], [63, 23, 0], [61, 22, 0], [60, 21, 0], [58, 21, 0], [57, 20, 0], [55, 20, 0], [54, 19, 0], [52, 19, 0], [51, 18, 0], [49, 18, 0], [48, 17, 0], [47, 17, 0], [45, 16, 0], [44, 16, 0], [43, 16, 0], [41, 15, 0], [40, 15, 0], [39, 14, 0], [38, 14, 0], [37, 14, 0], [36, 13, 0], [34, 13, 0], [33, 12, 0], [32, 12, 0], [31, 12, 0], [30, 11, 0], [29, 11, 0], [28, 11, 0], [27, 10, 0], [26, 10, 0], [25, 10, 0], [24, 9, 0], [24, 9, 0], [23, 9, 0], [22, 8, 0], [21, 8, 0], [20, 8, 0], [19, 7, 0], [19, 7, 0], [18, 7, 0], [17, 7, 0], [16, 6, 0], [15, 6, 0], [15, 6, 0], [14, 5, 0], [13, 5, 0], [13, 5, 0], [12, 5, 0], [11, 4, 0], [11, 4, 0], [10, 4, 0], [9, 4, 0], [9, 4, 0], [8, 3, 0], [8, 3, 0], [7, 3, 0], [6, 3, 0], [6, 2, 0], [5, 2, 0], [5, 2, 0], [4, 2, 0], [4, 2, 0], [3, 1, 0], [3, 1, 0], [2, 1, 0], [2, 1, 0], [1, 1, 0], [1, 0, 0], [0, 0, 0], [0, 0, 0]],
    'enhanced': [0, 3, 8, 14, 22, 31, 40, 50, 58, 67, 75, 82, 89, 96, 103, 110, 116, 122, 128, 134, 140, 145, 151, 156, 161, 166, 170, 175, 179, 183, 187, 191, 194, 198, 201, 204, 207, 210, 213, 215, 217, 219, 221, 223, 225, 226, 227, 228, 229, 230, 231, 231, 232, 232, 232, 232, 232, 232, 231, 231, 230, 230, 229, 228, 228, 227, 226, 225, 224, 222, 221, 220, 219, 217, 216, 214, 213, 211, 209, 208, 206, 204, 202, 201, 199, 197, 195, 193, 191, 189, 187, 185, 183, 181, 179, 177, 175, 173, 171, 169, 167, 164, 162, 160, 158, 156, 154, 152, 150, 148, 146, 143, 141, 139, 137, 135, 133, 131, 129, 127, 125, 123, 121, 119, 117, 116, 114, 112, 110, 108, 106, 105, 103, 101, 100, 98, 96, 95, 93, 91, 90, 88, 87, 85, 84, 83, 81, 80, 78, 77, 76, 74, 73, 72, 71, 69, 68, 67, 66, 65, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 45, 44, 43, 42, 41, 40, 40, 39, 38, 37, 36, 36, 35, 34, 33, 33, 32, 31, 31, 30, 29, 29, 28, 27, 27, 26, 25, 25, 24, 24, 23, 22, 22, 21, 21, 20, 20, 19, 18, 18, 17, 17, 16, 16, 15, 15, 14, 14, 13, 13, 12, 12, 11, 11, 10, 10, 9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 5, 4, 4, 3, 3, 2, 2, 1, 1, 0, 0],
}

def color_map(img, map_name = 'orange-enhanced', verbose = 0):
    _map = color_maps[map_name]
    if verbose > 1:
        plt.plot(_map)
        plt.show()

    # slower
    # _map = np.array(_map)
    # _func = np.vectorize(lambda x: _map[x], signature='()->(3)')
    # return _func(img)

    # faster
    return np.array([[_map[item] for item in row] for row in img])

def normalize(img, brightness=1.0, verbose=0):
    # 方法一：主体部分亮度均衡
    n, e = np.histogram(img, bins=100)
    if verbose > 1:
        plt.plot(n[20:])
        plt.show()
    med_idx = np.argsort(n[20:])[::-1] + 20
    # 直方图最高的3箱
    idx_a = min(med_idx[:3])
    idx_b = min(max(med_idx[:3])+1, len(e)-1)
    med_val_a = e[idx_a]
    med_val_b = e[idx_b]
    # 直方图最高的3箱像素均值
    med_val = np.mean(img[(img>med_val_a) & (img<med_val_b)])
    # print(med_idx[:3], idx_a, idx_b)
    # print(med_val)
    img = np.clip(img/med_val*152*brightness, 0, 255)

    # 方法二：按最亮的0.001部分归一化
    # val_max = np.quantile(img, 0.999) * 1.2
    # img = np.clip(img/val_max*255, 0, 255)

    if verbose > 0:
        print(f'overflow = {len(img[img==255]) / len(np.reshape(img, -1)) * 100:.3f}%')
    # img[img==255] = 0

    # n, e = np.histogram(img, bins=100)
    # med_idx = np.argmax(n[20:]) + 20
    # med_val = e[med_idx]
    # print(f'med_val = {med_val:.3f}')
    # plt.plot(n[20:])
    # plt.show()
    return img
